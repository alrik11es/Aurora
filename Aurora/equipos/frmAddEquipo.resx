<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>